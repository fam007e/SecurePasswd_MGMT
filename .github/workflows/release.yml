name: Release SecurePasswd_MGMT

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: debian-package
            package_glob: "*.deb"
            cpack_generator: "DEB"
          - os: windows-latest
            artifact_name: windows-installer
            package_glob: "*.exe"
            cpack_generator: "NSIS"
          - os: macos-latest
            artifact_name: macos-dmg
            package_glob: "*.dmg"
            cpack_generator: "DragNDrop"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the version
        id: get_version
        shell: bash
        run: echo "version=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_OUTPUT

      - name: Create source tarball
        if: runner.os == 'Linux'
        run: |
          cd ..
          tar -czvf securepasswd_mgmt-${{ steps.get_version.outputs.version }}.tar.gz \
            --exclude=".git" \
            --exclude=".github" \
            --exclude="*.tar.gz" \
            SecurePasswd_MGMT/
          mv securepasswd_mgmt-${{ steps.get_version.outputs.version }}.tar.gz SecurePasswd_MGMT/

      - name: Upload source tarball
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: source-tarball
          path: securepasswd_mgmt-${{ steps.get_version.outputs.version }}.tar.gz

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libsodium-dev libargon2-dev \
            libsqlcipher-dev libcsv-dev qt6-base-dev libssl-dev libcurl4-openssl-dev \
            libcmocka-dev

      - name: Cache vcpkg
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: '${{ github.workspace }}/vcpkg/installed'
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}

      - name: Setup vcpkg and install dependencies
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgJsonGlob: 'vcpkg.json'
          runVcpkgInstall: true
        env:
          VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/${{ github.repository_owner }},readwrite"
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NUGET_CREDENTIALPROVIDER_SESSIONTOKENCACHE_ENABLED: "false"

      - name: Build and install libcsv (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Find Visual Studio installation path
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" `
            -latest -products * -requires Microsoft.Component.MSBuild `
            -property installationPath

          if (-not $vsPath) {
            Write-Error "Visual Studio not found"
            exit 1
          }

          # Import Visual Studio environment
          $vsDevCmd = Join-Path $vsPath "Common7\Tools\VsDevCmd.bat"
          cmd.exe /c "call `"$vsDevCmd`" && set > %temp%\vcvars.txt"
          Get-Content "$env:TEMP\vcvars.txt" | ForEach-Object {
            if ($_ -match "^(.*?)=(.*)$") {
              Set-Item -Path "env:$($matches[1])" -Value $matches[2]
            }
          }

          # Clone and build libcsv
          git clone https://github.com/rgamble/libcsv.git
          cd libcsv

          # Create installation directory
          $installDir = "${{ github.workspace }}\libcsv-install"
          New-Item -ItemType Directory -Force -Path "$installDir\include" | Out-Null
          New-Item -ItemType Directory -Force -Path "$installDir\lib" | Out-Null

          # Compile csv.c
          cl.exe /c /O2 /MD /DLIBCSV_EXPORTS csv.c
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to compile csv.c"
            exit 1
          }

          # Create static library
          lib.exe /OUT:csv.lib csv.obj
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to create csv.lib"
            exit 1
          }

          # Install files
          Copy-Item csv.h "$installDir\include\"
          Copy-Item csv.lib "$installDir\lib\"

          # Verify installation
          if (-not (Test-Path "$installDir\include\csv.h") -or -not (Test-Path "$installDir\lib\csv.lib")) {
            Write-Error "libcsv installation verification failed"
            exit 1
          }

          Write-Host "libcsv successfully installed to $installDir"

      - name: Setup Homebrew paths
        if: runner.os == 'macOS'
        run: |
          echo "/opt/homebrew/bin" >> $GITHUB_PATH
          echo "/opt/homebrew/sbin" >> $GITHUB_PATH
          echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        timeout-minutes: 45
        run: |
          set -e
          export HOMEBREW_NO_AUTO_UPDATE=1
          export HOMEBREW_NO_INSTALL_CLEANUP=1

          # Install packages
          packages=(qt@6 create-dmg libsodium argon2 sqlcipher cmocka openssl@3)
          for pkg in "${packages[@]}"; do
            echo "Installing $pkg..."
            if ! brew list "$pkg" &>/dev/null; then
              brew install "$pkg" || {
                echo "Error: Failed to install $pkg"
                exit 1
              }
            else
              echo "$pkg already installed"
            fi
          done

      - name: Build and install libcsv (macOS)
        if: runner.os == 'macOS'
        run: |
          set -e
          git clone https://github.com/rgamble/libcsv.git
          cd libcsv

          # Compile csv.c
          gcc -c -O2 -fPIC -DLIBCSV_EXPORTS csv.c -o csv.o

          # Create static library
          ar rcs libcsv.a csv.o

          # Install files
          sudo mkdir -p /usr/local/include /usr/local/lib
          sudo cp csv.h /usr/local/include/
          sudo cp libcsv.a /usr/local/lib/

          # Verify installation
          if [ ! -f /usr/local/lib/libcsv.a ] || [ ! -f /usr/local/include/csv.h ]; then
            echo "Error: libcsv installation verification failed"
            exit 1
          fi

          echo "libcsv successfully installed"
          ls -la /usr/local/lib/libcsv* || true
          ls -la /usr/local/include/csv.h || true

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCPACK_PACKAGE_VERSION="${{ steps.get_version.outputs.version }}" \
            -DPROJECT_VERSION="${{ steps.get_version.outputs.version }}" \
            -DCPACK_GENERATOR="${{ matrix.cpack_generator }}" \
            -DCPACK_PACKAGE_CONTACT="fam007e <faisalmoshiur+secpasswdmgmt@gmail.com>" \
            -DCPACK_DEBIAN_PACKAGE_MAINTAINER="fam007e <faisalmoshiur+secpasswdmgmt@gmail.com>"

      - name: Configure CMake (macOS)
        if: runner.os == 'macOS'
        run: |
          set -e

          # Get Homebrew prefix (handles both Intel and Apple Silicon)
          BREW_PREFIX=$(brew --prefix)

          # Set up library paths
          export SQLCIPHER_INC="${BREW_PREFIX}/opt/sqlcipher/include"
          export SODIUM_INC="${BREW_PREFIX}/opt/libsodium/include"
          export ARGON2_INC="${BREW_PREFIX}/opt/argon2/include"
          export OPENSSL_INC="${BREW_PREFIX}/opt/openssl@3/include"
          export CMOCKA_INC="${BREW_PREFIX}/opt/cmocka/include"

          export ARGON2_LIB="${BREW_PREFIX}/opt/argon2/lib/libargon2.dylib"
          export SQLCIPHER_LIB="${BREW_PREFIX}/opt/sqlcipher/lib/libsqlcipher.dylib"
          export SODIUM_LIB="${BREW_PREFIX}/opt/libsodium/lib/libsodium.dylib"

          # Clean and create build directory
          rm -rf build
          mkdir -p build

          # Configure CMake with all necessary paths
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCPACK_PACKAGE_VERSION="${{ steps.get_version.outputs.version }}" \
            -DPROJECT_VERSION="${{ steps.get_version.outputs.version }}" \
            -DCPACK_GENERATOR="${{ matrix.cpack_generator }}" \
            -DLIBCSV_INCLUDE_DIRS=/usr/local/include \
            -DLIBCSV_LIBRARIES=/usr/local/lib/libcsv.a \
            -DSQLCIPHER_INCLUDE_DIRS="${SQLCIPHER_INC}" \
            -DLIBSODIUM_INCLUDE_DIRS="${SODIUM_INC}" \
            -DARGON2_INCLUDE_DIRS="${ARGON2_INC}" \
            -DOPENSSL_INCLUDE_DIR="${OPENSSL_INC}" \
            -DCMOCKA_INCLUDE_DIRS="${CMOCKA_INC}" \
            -DARGON2_LIBRARIES="${ARGON2_LIB}" \
            -DSQLCIPHER_LIBRARIES="${SQLCIPHER_LIB}" \
            -DLIBSODIUM_LIBRARIES="${SODIUM_LIB}" \
            -DQt6_DIR="${BREW_PREFIX}/opt/qt@6/lib/cmake/Qt6" \
            -DCMAKE_PREFIX_PATH="${BREW_PREFIX}/opt/qt@6;${BREW_PREFIX}/opt/sqlcipher;${BREW_PREFIX}/opt/openssl@3;${BREW_PREFIX}/opt/argon2;${BREW_PREFIX}/opt/libsodium;${BREW_PREFIX}/opt/cmocka" \
            -DCMAKE_INSTALL_RPATH="${BREW_PREFIX}/opt/qt@6/lib;${BREW_PREFIX}/opt/sqlcipher/lib;${BREW_PREFIX}/opt/libsodium/lib;${BREW_PREFIX}/opt/argon2/lib;${BREW_PREFIX}/opt/openssl@3/lib"

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $vcpkgRoot = Join-Path $pwd "vcpkg"
          $version = "${{ steps.get_version.outputs.version }}"
          $libcsvInstall = Join-Path $pwd "libcsv-install"

          # Verify libcsv installation
          if (-not (Test-Path "$libcsvInstall\include\csv.h") -or -not (Test-Path "$libcsvInstall\lib\csv.lib")) {
            Write-Error "libcsv not found at expected location"
            exit 1
          }

          # Configure CMake
          cmake -B build `
            -DCMAKE_BUILD_TYPE=Release `
            -DCPACK_PACKAGE_VERSION="$version" `
            -DPROJECT_VERSION="$version" `
            -DCPACK_GENERATOR="${{ matrix.cpack_generator }}" `
            -DCMAKE_TOOLCHAIN_FILE="$vcpkgRoot\scripts\buildsystems\vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET=x64-windows `
            -DLIBCSV_INCLUDE_DIRS="$libcsvInstall\include" `
            -DLIBCSV_LIBRARIES="$libcsvInstall\lib\csv.lib"

          if ($LASTEXITCODE -ne 0) {
            Write-Error "CMake configuration failed"
            exit 1
          }

      - name: Build
        run: cmake --build build --config Release

      - name: Run tests (Linux and macOS)
        if: runner.os != 'Windows'
        working-directory: build
        run: ctest --output-on-failure --build-config Release
        continue-on-error: true

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        working-directory: build
        shell: pwsh
        run: ctest -C Release --output-on-failure
        continue-on-error: true

      - name: Package
        working-directory: build
        run: cpack -G ${{ matrix.cpack_generator }}

      - name: List generated packages
        shell: bash
        working-directory: build
        run: |
          echo "Generated packages:"
          ls -lh ${{ matrix.package_glob }} || echo "No packages found matching ${{ matrix.package_glob }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: build/${{ matrix.package_glob }}

  build-arch:
    runs-on: ubuntu-latest
    container:
      image: archlinux/archlinux:latest
    needs: build
    steps:
      - name: Get the version
        id: get_version
        run: echo "version=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_OUTPUT

      - name: Download source tarball
        uses: actions/download-artifact@v4
        with:
          name: source-tarball

      - name: Install build tools and dependencies
        run: |
          pacman -Sy --noconfirm
          pacman -S --noconfirm git base-devel libsodium argon2 sqlcipher \
            qt6-base openssl curl cmake sudo fakeroot

      - name: Build and install libcsv (Arch)
        run: |
          set -e
          git clone https://github.com/rgamble/libcsv.git
          cd libcsv
          make
          make install

      - name: Extract source tarball
        run: |
          tar -xzvf securepasswd_mgmt-${{ steps.get_version.outputs.version }}.tar.gz

      - name: Create PKGBUILD
        run: |
          sha256=$(sha256sum securepasswd_mgmt-${{ steps.get_version.outputs.version }}.tar.gz | awk '{print $1}')
          cat <<EOF > PKGBUILD
          # Maintainer: fam007e <faisalmoshiur+secpasswdmgmt@gmail.com>
          pkgname=securepasswd_mgmt
          pkgver=${{ steps.get_version.outputs.version }}
          pkgrel=1
          pkgdesc="A secure, cross-platform password manager with TOTP support."
          arch=('x86_64')
          url="https://github.com/fam007e/SecurePasswd_MGMT"
          license=('MIT')
          depends=('libsodium' 'argon2' 'sqlcipher' 'qt6-base' 'libcsv' 'openssl' 'curl')
          makedepends=('cmake' 'gcc')
          source=("\$pkgname-\$pkgver.tar.gz")
          sha256sums=("$sha256")

          build() {
              cd "\$srcdir/SecurePasswd_MGMT"
              mkdir -p build
              cd build
              cmake .. -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release
              make
          }

          package() {
              cd "\$srcdir/SecurePasswd_MGMT/build"
              make DESTDIR="\$pkgdir/" install
          }
          EOF

      - name: Build Arch package
        run: |
          useradd -m builder
          chown -R builder:builder .
          sudo -u builder makepkg -s --noconfirm

      - name: Upload Arch package
        uses: actions/upload-artifact@v4
        with:
          name: arch-package
          path: "*.pkg.tar.zst"

  release:
    needs: [build, build-arch]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the version
        id: get_version
        run: echo "version=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List all artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f

      - name: Get previous tag
        id: previous_tag
        run: |
          previous_tag=$(git describe --tags --abbrev=0 ${{ github.ref }}^ 2>/dev/null || echo "")
          echo "previous_tag=$previous_tag" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Generate Release Body
        id: generate_release_body
        run: |
          {
            echo "body<<EOF"
            if [ -n "${{ steps.previous_tag.outputs.previous_tag }}" ]; then
              git log --pretty=format:"- %s" ${{ steps.previous_tag.outputs.previous_tag }}..${{ github.ref }}
            else
              git log --pretty=format:"- %s" ${{ github.ref }}
            fi
            echo ""
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## Release ${{ steps.get_version.outputs.version }}

            This release includes the following changes:

            ${{ steps.generate_release_body.outputs.body }}

            ## Downloads

            - **Linux (Debian/Ubuntu)**: `securepasswd_mgmt-${{ steps.get_version.outputs.version }}.deb`
            - **Linux (Arch)**: `securepasswd_mgmt-${{ steps.get_version.outputs.version }}.pkg.tar.zst`
            - **Windows**: `SecurePasswd_MGMT-${{ steps.get_version.outputs.version }}.exe`
            - **macOS**: `SecurePasswd_MGMT-${{ steps.get_version.outputs.version }}.dmg`
            - **Source**: `securepasswd_mgmt-${{ steps.get_version.outputs.version }}.tar.gz`
          draft: false
          prerelease: false
          files: |
            artifacts/source-tarball/*.tar.gz
            artifacts/debian-package/*.deb
            artifacts/arch-package/*.pkg.tar.zst
            artifacts/windows-installer/*.exe
            artifacts/macos-dmg/*.dmg
